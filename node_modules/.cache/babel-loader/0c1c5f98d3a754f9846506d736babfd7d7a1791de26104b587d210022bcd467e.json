{"ast":null,"code":"import React,{useState}from'react';import noteContext from'./noteContext';import{jsx as _jsx}from\"react/jsx-runtime\";const NoteState=props=>{const host=\"http://localhost:5000\";const noteInitsialized=[];const[notes,setnotes]=useState(noteInitsialized);//GetAll Notes....\nconst getallNotes=async()=>{//API Call\nconst response=await fetch(\"\".concat(host,\"/api/notes/fatchallnotes\"),{method:\"GET\",headers:{\"auth-token\":localStorage.getItem(\"token\")}});const json=await response.json();setnotes(json);};//Add a new Note....\nconst addNotes=async(title,description,tag)=>{//API Call\nconst response=await fetch(\"\".concat(host,\"/api/notes/addnotes\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\",\"auth-token\":localStorage.getItem(\"token\")},body:JSON.stringify({title,description,tag})});const note=await response.json();setnotes(notes.concat(note));};//Delete a Note...\nconst deleteNote=async id=>{//API Call\nconst response=await fetch(\"\".concat(host,\"/api/notes/notedelete/\").concat(id),{method:\"DELETE\",headers:{\"Content-Type\":\"application/json\",\"auth-token\":localStorage.getItem(\"token\")}});await response.json();//This is Client side\nconst newNote=notes.filter(note=>{return note._id!==id;});setnotes(newNote);};//Edit a Note...\nconst editNote=async(id,title,description,tag)=>{//API Call\nconst response=await fetch(\"\".concat(host,\"/api/notes/updatenote/\").concat(id),{method:\"PUT\",headers:{\"Content-Type\":\"application/json\",\"auth-token\":localStorage.getItem(\"token\")},body:JSON.stringify({title,description,tag})});await response.json();//This is Client side\nlet newnote=JSON.parse(JSON.stringify(notes));for(let index=0;index<newnote.length;index++){const element=newnote[index];if(element._id===id){newnote[index].title=title;newnote[index].description=description;newnote[index].tag=tag;break;}}setnotes(newnote);};return/*#__PURE__*/_jsx(noteContext.Provider,{value:{notes,addNotes,deleteNote,editNote,getallNotes},children:props.children});};export default NoteState;","map":{"version":3,"names":["React","useState","noteContext","jsx","_jsx","NoteState","props","host","noteInitsialized","notes","setnotes","getallNotes","response","fetch","concat","method","headers","localStorage","getItem","json","addNotes","title","description","tag","body","JSON","stringify","note","deleteNote","id","newNote","filter","_id","editNote","newnote","parse","index","length","element","Provider","value","children"],"sources":["E:/jash/ReactJSYT/MiniProjects/Mynotebook/mynote/src/Constaxt/notes/NoteState.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport noteContext from './noteContext'\r\n\r\nconst NoteState = (props) => {\r\n  const host = \"http://localhost:5000\"\r\n   const noteInitsialized = []\r\n   const [notes, setnotes] = useState(noteInitsialized)\r\n\r\n //GetAll Notes....\r\n const getallNotes = async()=>{\r\n  //API Call\r\n  const response = await fetch(`${host}/api/notes/fatchallnotes`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"auth-token\":localStorage.getItem(\"token\"),\r\n    },\r\n  });\r\n  const json = await response.json()\r\n  setnotes(json)\r\n}\r\n\r\n\r\n   //Add a new Note....\r\n   const addNotes = async(title , description , tag)=>{\r\n    //API Call\r\n    const response = await fetch(`${host}/api/notes/addnotes`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":localStorage.getItem(\"token\"),\r\n      },\r\n      body: JSON.stringify({title , description , tag}),\r\n    });\r\n    const note = await response.json()\r\n    setnotes(notes.concat(note))\r\n   }\r\n\r\n\r\n\r\n\r\n   //Delete a Note...\r\n   const deleteNote = async(id)=>{\r\n    //API Call\r\n    const response = await fetch(`${host}/api/notes/notedelete/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":localStorage.getItem(\"token\"),\r\n      },\r\n     \r\n    });\r\n    await response.json();\r\n    //This is Client side\r\n    const newNote = notes.filter((note)=>{return note._id !== id}) \r\n    setnotes(newNote)\r\n   }\r\n\r\n   //Edit a Note...\r\n   const editNote = async(id,title , description , tag)=>{\r\n    //API Call\r\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":localStorage.getItem(\"token\"),\r\n      },\r\n      body: JSON.stringify({title , description , tag}),\r\n    });\r\n     await response.json()\r\n    //This is Client side\r\n    let newnote = JSON.parse(JSON.stringify(notes))\r\n    for(let index = 0 ; index<newnote.length ; index++){\r\n      const element = newnote[index]\r\n      if(element._id === id){\r\n        newnote[index].title = title;\r\n        newnote[index].description = description;\r\n        newnote[index].tag = tag;\r\n        break;\r\n      }\r\n    }\r\n    setnotes(newnote)\r\n   }\r\n    return (\r\n        <noteContext.Provider value={{ notes , addNotes , deleteNote , editNote , getallNotes}}>\r\n            {props.children}\r\n        </noteContext.Provider>\r\n    )\r\n}\r\n\r\nexport default NoteState"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,WAAW,KAAM,eAAe,QAAAC,GAAA,IAAAC,IAAA,yBAEvC,KAAM,CAAAC,SAAS,CAAIC,KAAK,EAAK,CAC3B,KAAM,CAAAC,IAAI,CAAG,uBAAuB,CACnC,KAAM,CAAAC,gBAAgB,CAAG,EAAE,CAC3B,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAACO,gBAAgB,CAAC,CAEtD;AACA,KAAM,CAAAG,WAAW,CAAG,KAAAA,CAAA,GAAS,CAC5B;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIP,IAAI,6BAA4B,CAC9DQ,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,YAAY,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAC3C,CACF,CAAC,CAAC,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACO,IAAI,CAAC,CAAC,CAClCT,QAAQ,CAACS,IAAI,CAAC,CAChB,CAAC,CAGE;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAAA,CAAMC,KAAK,CAAGC,WAAW,CAAGC,GAAG,GAAG,CAClD;AACA,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIP,IAAI,wBAAuB,CACzDQ,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,YAAY,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAC3C,CAAC,CACDM,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAACL,KAAK,CAAGC,WAAW,CAAGC,GAAG,CAAC,CAClD,CAAC,CAAC,CACF,KAAM,CAAAI,IAAI,CAAG,KAAM,CAAAf,QAAQ,CAACO,IAAI,CAAC,CAAC,CAClCT,QAAQ,CAACD,KAAK,CAACK,MAAM,CAACa,IAAI,CAAC,CAAC,CAC7B,CAAC,CAKD;AACA,KAAM,CAAAC,UAAU,CAAG,KAAM,CAAAC,EAAE,EAAG,CAC7B;AACA,KAAM,CAAAjB,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIP,IAAI,2BAAAO,MAAA,CAAyBe,EAAE,EAAI,CACjEd,MAAM,CAAE,QAAQ,CAChBC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,YAAY,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAC3C,CAEF,CAAC,CAAC,CACF,KAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAC,CACrB;AACA,KAAM,CAAAW,OAAO,CAAGrB,KAAK,CAACsB,MAAM,CAAEJ,IAAI,EAAG,CAAC,MAAO,CAAAA,IAAI,CAACK,GAAG,GAAKH,EAAE,EAAC,CAAC,CAC9DnB,QAAQ,CAACoB,OAAO,CAAC,CAClB,CAAC,CAED;AACA,KAAM,CAAAG,QAAQ,CAAG,KAAAA,CAAMJ,EAAE,CAACR,KAAK,CAAGC,WAAW,CAAGC,GAAG,GAAG,CACrD;AACA,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIP,IAAI,2BAAAO,MAAA,CAAyBe,EAAE,EAAI,CACjEd,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,YAAY,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAC3C,CAAC,CACDM,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAACL,KAAK,CAAGC,WAAW,CAAGC,GAAG,CAAC,CAClD,CAAC,CAAC,CACD,KAAM,CAAAX,QAAQ,CAACO,IAAI,CAAC,CAAC,CACtB;AACA,GAAI,CAAAe,OAAO,CAAGT,IAAI,CAACU,KAAK,CAACV,IAAI,CAACC,SAAS,CAACjB,KAAK,CAAC,CAAC,CAC/C,IAAI,GAAI,CAAA2B,KAAK,CAAG,CAAC,CAAGA,KAAK,CAACF,OAAO,CAACG,MAAM,CAAGD,KAAK,EAAE,CAAC,CACjD,KAAM,CAAAE,OAAO,CAAGJ,OAAO,CAACE,KAAK,CAAC,CAC9B,GAAGE,OAAO,CAACN,GAAG,GAAKH,EAAE,CAAC,CACpBK,OAAO,CAACE,KAAK,CAAC,CAACf,KAAK,CAAGA,KAAK,CAC5Ba,OAAO,CAACE,KAAK,CAAC,CAACd,WAAW,CAAGA,WAAW,CACxCY,OAAO,CAACE,KAAK,CAAC,CAACb,GAAG,CAAGA,GAAG,CACxB,MACF,CACF,CACAb,QAAQ,CAACwB,OAAO,CAAC,CAClB,CAAC,CACA,mBACI9B,IAAA,CAACF,WAAW,CAACqC,QAAQ,EAACC,KAAK,CAAE,CAAE/B,KAAK,CAAGW,QAAQ,CAAGQ,UAAU,CAAGK,QAAQ,CAAGtB,WAAW,CAAE,CAAA8B,QAAA,CAClFnC,KAAK,CAACmC,QAAQ,CACG,CAAC,CAE/B,CAAC,CAED,cAAe,CAAApC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}